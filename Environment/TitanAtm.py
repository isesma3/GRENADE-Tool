# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# File Name: TitanAtm.py                                 
# Creat Date: December 21, 2022                        
# Contributors (In-Order): Daniel J. Moore, Tyler V. Obero, Alexandre Masset                        
# Last Edited: June 23, 2024                    
# Last Edited By: Tyler V. Obero                                
# For: Aerospace Systems Design Lab @ Georgia Tech     
# Description: Definition of Titan's Atmosphere based on Yelle Model and simulation & interpolation based wind estimates (profiles from Newman et.al. "Stratospheric Superrotation in the TitanWRF model")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Functions:                                          
#   Titan_Const()
#   TitanATM_Table()
#   Wind_Estimate()
#   Wind_Summer()
#   Wind_Fall()
#   Wind_Winter()
#   Wind_Spring()
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Version Notes
#   1 - Initial Setup
#       1.1 - Addition of annual wind estimate functions
#   2 - Additional Variables added
#       2.1 - Added Dynamic Viscosity
#       2.2 - Added constants function (Current Version)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import os
LOCAL_DIR = os.path.dirname(__file__)
ROOT_DIR = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
# Import Libraries
import pandas as pd
from scipy.interpolate import interp1d
import numpy as np
import matplotlib.pyplot as plt

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def Planet_Const(planet):
    '''
    Inputs:
    Outputs
        Data - array of columns:
            gravitational acceleration [m/s^2]
            Diameter [km]
            Day Length [hours]
    '''
    if planet == "Titan":
        data = [1.352,2574.73*2,384]
    elif planet == "Earth":
        data = [9.80665,6371*2,24]
    elif planet == "Mars":
        data = [3.69,3389*2,24.6]
    return data

def Earth_Const():
    '''
    Inputs:
    Outputs
        Data - array of columns:
            gravitational acceleration [m/s^2]
            Diameter [km]
    '''
    data = [9.80665,6371*2,24]
    return data

def Mars_Const():
    '''
    Inputs:
    Outputs
        Data - array of columns:
            gravitational acceleration [m/s^2]
            Diameter [km]
    '''
    data = [3.69,3389*2,24.6]
    return data

def ATM_Table(h:float,table:str):
    '''
    Inputs:
        h       - Altitude [m]
        table   - Selection of data table to reference in Yelle Model (options of 'max', 'min', any other '' string selects the recommended)

    Outputs:
        Data - array of columns:
                Density [kg/m^3]
                Pressure [Pa]
                Temperature [k]
                Speed of Sound [m/s]
                Ratio of Specific Heats (estimated)
                Dynamic Viscosity []
                # N2 per m^3
                # CH4 per m^3
                # AR per m^3
                # Fc, a correction factor accounting for non-ideal --> Ractual ~ (1+Fc)*Rideal ~ (1+Fc)*(p/(rho*T))
    '''
    #Import Needed Reference Table
    if table == 'min':
        df = pd.read_csv(LOCAL_DIR + '/Atm_Min.csv')
    elif table == 'max':
        df = pd.read_csv(LOCAL_DIR + '/Atm_Max.csv')
    elif table == 'Earth':
        df = pd.read_csv(LOCAL_DIR + '/Atm_Earth.csv')
    elif table == 'Titan':
        df = pd.read_csv(LOCAL_DIR + '/Atm_Titan.csv')
    elif table == 'Mars':
        df = pd.read_csv(LOCAL_DIR + '/Atm_Mars.csv')
    Val = df.to_numpy()
    #Define Interpolation
    Inter_rho   = interp1d(Val[:,0],Val[:,1],kind='cubic')
    Inter_p     = interp1d(Val[:,0],Val[:,2],kind='cubic')
    Inter_T     = interp1d(Val[:,0],Val[:,3],kind='cubic')
    Inter_gamma = interp1d(Val[:,0],Val[:,8],kind='cubic')
    Inter_mu    = interp1d(Val[:,0],Val[:,9],kind='cubic')
    Inter_N2    = interp1d(Val[:,0],Val[:,5],kind='cubic')
    Inter_CH4   = interp1d(Val[:,0],Val[:,6],kind='cubic')
    Inter_AR    = interp1d(Val[:,0],Val[:,7],kind='cubic')
    Inter_Fc    = interp1d(Val[:,0],Val[:,4],kind='cubic')
    #Retrieve and return values
    R_i = np.divide(Inter_p(h),np.multiply(Inter_rho(h),Inter_T(h)))
    R_a = np.multiply(1+Inter_Fc(h),R_i)
    a = np.sqrt(np.multiply(np.multiply(Inter_gamma(h),R_a),Inter_T(h)))
    Data = np.array([Inter_rho(h),Inter_p(h),Inter_T(h),a,Inter_gamma(h),Inter_mu(h),Inter_N2(h),Inter_CH4(h),Inter_AR(h),Inter_Fc(h)])
    return Data

def Wind_Estimate(lat:float,alt:float,yr_frac:float):
    '''
    Description: Function queries solstice and equinox wind data for a given latitude and altitude and uses cubic interpolation to return zonal wind estimate for time of year

    Inputs:
        lat     - latitude [deg]
        alt     - altitude [m]
        yr_frac - fraction of Titanian year from winter solstice to winter solstice

    Outputs:
        wind    - zonal wind velocity estimate [m/s], note that Titanin zonal wind predominantly prograde

    Function Dependencies
        TitanATM_Table()
        Wind_Summer()
        Wind_Fall()
        Wind_Winter()
        Wind_Spring()

    '''
    D1 = ATM_Table(alt, 'Titan')
    p = D1[1]/100

    w_50 = Wind_Summer(lat,p)
    w_25 = Wind_Fall(lat,p)
    w0 = Wind_Winter(lat,p)
    w25 = Wind_Spring(lat,p)
    w50 = w_50
    w75 = w_25
    w100 = w0
    w125 = w25
    w150 = w50
    frac = np.array([-0.5, -0.25, 0, 0.25, 0.5, 0.75, 1, 1.25, 1.5])
    wind_data = np.array([w_50,w_25,w0,w25,w50,w75,w100,w125,w150])
    Inter_wind = interp1d(frac,wind_data,kind='cubic')
    wind = Inter_wind(yr_frac)
    return wind


def Wind_Summer(latitude_summer:float,p:float):
    '''
    Description: Estimates zonal wind on summer solstice based on Neural net fit of TitanWRF simulation data (reference paper in TitanATM.py header)
    
    Inputs:
        latitude_summer     - latitude [deg]
        p              - pressure altitude [mbar]

    Outputs:
        Predicted_wind_summer    - zonal wind velocity estimate [m/s], note that Titanin zonal wind predominantly prograde

    Function Dependencies

    '''

    #Adjust inputs for use
    log_p__summer = np.log10(p)
    # Layer 2
    H2_1 = np.tanh((-1.6337468072116 + -0.040705128580235*latitude_summer + -0.749223436612119*log_p__summer))
    H2_2 = np.tanh((-0.0799634263460345 + -0.0162833271069325*latitude_summer + -0.670108252044945*log_p__summer))
    H2_3 = np.tanh((1.63437403584983 + 0.0418616008424194*latitude_summer + 0.807531267431732*log_p__summer))
    H2_4 = np.tanh((1.08706876949776 + 0.013026896167996*latitude_summer + 0.900146826776365*log_p__summer))
    H2_5 = np.tanh((1.68703187538799 + -0.0140872073080574*latitude_summer + -0.404622304585613*log_p__summer))
    H2_6 = -0.972938515850264 + -0.0215476111132006*latitude_summer + 1.87390112422106*log_p__summer
    H2_7 = -2.15611893297153 + -0.00858841528775304*latitude_summer + 0.625000007929332*log_p__summer
    H2_8 = -0.101325102605041 + -0.0233120649150025*latitude_summer + -0.326104801607552*log_p__summer
    H2_9 = -0.925705761699478 + 0.00213659594277385*latitude_summer + 0.272583629190583*log_p__summer
    H2_10 = -1.06073790133579 + -0.0120986937318803*latitude_summer + -0.542912891615255*log_p__summer
    H2_11 = np.exp((-(0.5*np.square(1.42763838829072 + -0.0172147314270029*latitude_summer + 0.48419012273913*log_p__summer))))
    H2_12 = np.exp((-(0.5*np.square(0.198799925040483 + 0.0185254689199951*latitude_summer + -0.565792934948703*log_p__summer))))
    H2_13 = np.exp((-(0.5*np.square(-0.338553309806374 + 0.0194209363091397*latitude_summer + -0.147578202716024*log_p__summer))))
    H2_14 = np.exp((-(0.5*np.square(0.398896720178291 + -0.0131390329859417*latitude_summer + -0.356460477931309*log_p__summer))))
    H2_15 = np.exp((-(0.5*np.square(-0.0616078741087482 + -0.0491758059507857*latitude_summer + 0.914974011934049*log_p__summer))))
    # Layer 1
    H1_1 = np.tanh((2.09326407310227 + 1.17141171389961*H2_1 + -2.5447996452941*H2_10 + -1.73212122378253*H2_11 + -0.890162893682674*H2_12 + -3.72653290883359*H2_13 + 3.51695304585084*H2_14 + -0.947128657354932*H2_15 + -2.48935308666091*H2_2 + -1.23664898865591*H2_3 + 0.314161761403069*H2_4 + -3.27036507635519*H2_5 + -1.57756574569162*H2_6 + -1.0294217853404*H2_7 + -0.211381383416276*H2_8 + -0.775527389247229*H2_9))
    H1_2 = np.tanh((-0.0621935360034368 + 0.734236212521759*H2_1 + 0.348989608095552*H2_10 + 0.608290930183418*H2_11 + 1.74563965920421*H2_12 + -2.18016365724378*H2_13 + 2.74816574959175*H2_14 + 0.788493500103663*H2_15 + 1.90931082325152*H2_2 + -1.47245521698255*H2_3 + 0.0706460682595136*H2_4 + 0.487274301828063*H2_5 + 0.401699811261915*H2_6 + 2.71057004087723*H2_7 + -3.29758292981043*H2_8 + -0.775351245199182*H2_9))
    H1_3 = np.tanh((-0.890143948071626 + -2.7843746177586*H2_1 + 0.00395433681356538*H2_10 + 0.51046610748239*H2_11 + -0.657750227189844*H2_12 + 2.4529609338274*H2_13 + -2.36313886920265*H2_14 + 0.937227134797647*H2_15 + 3.04051097985185*H2_2 + -1.74238295200227*H2_3 + -0.710108463115082*H2_4 + 0.427313776778118*H2_5 + -1.01433932155895*H2_6 + 0.167939013241746*H2_7 + -1.29335099071352*H2_8 + 0.550132517730933*H2_9))
    H1_4 = np.tanh((0.129203273858636 + -0.146683639365541*H2_1 + -1.61591322831395*H2_10 + -3.63370946957203*H2_11 + -2.49933934372913*H2_12 + -1.32000876574344*H2_13 + 2.55012538711387*H2_14 + 0.524204718896286*H2_15 + -0.125724126807276*H2_2 + -0.496668967501683*H2_3 + -0.870798548022533*H2_4 + -0.984210948296259*H2_5 + -0.719356771543013*H2_6 + -0.534273273316759*H2_7 + 0.119605950301086*H2_8 + -0.32353799267575*H2_9))
    H1_5 = np.tanh((-1.6333851947596 + -1.34058870554403*H2_1 + -0.291612343751149*H2_10 + -2.23374614677646*H2_11 + 1.04735975057555*H2_12 + 2.1582892590607*H2_13 + 2.16221115628703*H2_14 + 0.227351957384332*H2_15 + 0.358450389441685*H2_2 + -1.29704673551*H2_3 + 0.175771372445426*H2_4 + -0.45144674073995*H2_5 + 0.117788796263749*H2_6 + 0.0977697291591652*H2_7 + -0.26399043746617*H2_8 + -0.306561141049838*H2_9))
    H1_6 = -0.495466539836651 + 0.70087374425593*H2_1 + 0.18328345620128*H2_10 + -1.93795411870225*H2_11 + -0.494234202388989*H2_12 + 0.9495731902383*H2_13 + 2.14555295405326*H2_14 + 0.599837038965791*H2_15 + 0.269884831952848*H2_2 + 0.270690348752707*H2_3 + -1.7831536787037*H2_4 + -2.38084212437811*H2_5 + 0.642791270657011*H2_6 + 0.679958862381477*H2_7 + -0.500827732362188*H2_8 + -0.460862975156697*H2_9
    H1_7 = -2.10841070135196 + -0.289514865977127*H2_1 + -1.57060341086536*H2_10 + -1.45418121056314*H2_11 + 2.18804829963212*H2_12 + -0.950095002978055*H2_13 + 1.45079241298854*H2_14 + 0.664174884966892*H2_15 + 0.0427127185063356*H2_2 + 0.556225989709899*H2_3 + 0.710717274604228*H2_4 + -1.83535667177494*H2_5 + -0.767985968033497*H2_6 + -1.30120958099278*H2_7 + 0.773735398234508*H2_8 + -0.785227588808192*H2_9
    H1_8 = 0.16039372684743 + 0.927442213345578*H2_1 + -0.139956938682431*H2_10 + 0.4208070471465*H2_11 + -0.434033025619644*H2_12 + -2.09238041917843*H2_13 + -1.83441254244609*H2_14 + 2.09715994107555*H2_15 + 0.263799452788486*H2_2 + 1.35696503494048*H2_3 + -0.641023613869886*H2_4 + 2.94298003953936*H2_5 + -0.933359410922657*H2_6 + 0.620733115835422*H2_7 + -1.70441152129898*H2_8 + 0.107492887402645*H2_9
    H1_9 = np.exp((-(0.5*np.square(-0.200804671263665 + 1.43219099553597*H2_1 + -1.40786924390633*H2_10 + 2.71371598077576*H2_11 + 1.60804782157225*H2_12 + 0.280323784711626*H2_13 + 5.80780473566694*H2_14 + -0.231949925915245*H2_15 + 0.955159518910067*H2_2 + -1.84535968742173*H2_3 + -2.06388362478089*H2_4 + 9.15947187410577*H2_5 + -1.8608860278466*H2_6 + 1.49962613153284*H2_7 + -4.13230875940981*H2_8 + 3.52297578090333*H2_9))))
    H1_10 = np.exp((-(0.5*np.square(-2.86705512373762 + -5.18009774654585*H2_1 + 1.52351260422699*H2_10 + -1.93189933246229*H2_11 + 1.92355854717123*H2_12 + -0.641662015391395*H2_13 + -2.4794452241238*H2_14 + 0.46603078602344*H2_15 + -2.97552332948069*H2_2 + 3.83653173957813*H2_3 + 2.4922514557308*H2_4 + -2.36749545339204*H2_5 + -0.909003209234549*H2_6 + 2.38314437062509*H2_7 + -1.47336358332249*H2_8 + 1.34007910449034*H2_9))))
    H1_11 = np.exp((-(0.5*np.square(0.696555662480241 + -5.12679344448441*H2_1 + -0.084805891046584*H2_10 + -1.11898700846998*H2_11 + -0.86403541287399*H2_12 + 0.278868118573031*H2_13 + 1.23340989556651*H2_14 + -0.343201521669777*H2_15 + -2.02476745623238*H2_2 + -7.0684019818385*H2_3 + -0.540989567851364*H2_4 + -2.29611713400347*H2_5 + 0.819863352901346*H2_6 + -0.498462535442054*H2_7 + -0.0469992887680013*H2_8 + -0.741023581795722*H2_9))))
    H1_12 = np.exp((-(0.5*np.square(0.0927886288307894 + -2.79248974906756*H2_1 + -0.323100987904962*H2_10 + 1.90930405146886*H2_11 + 3.24234121292764*H2_12 + -0.539864358188343*H2_13 + -0.472912016335101*H2_14 + 1.17363696566869*H2_15 + 1.50675896999404*H2_2 + -0.920881787970777*H2_3 + 0.805564701249149*H2_4 + 4.94743592717979*H2_5 + 0.119921022568021*H2_6 + 2.43513999342942*H2_7 + -0.460691358590789*H2_8 + 0.45379282451708*H2_9))))
    H1_13 = np.exp((-(0.5*np.square(-0.711258293148803 + -7.3320899163952*H2_1 + 0.156272047294455*H2_10 + -3.27565646681025*H2_11 + -3.35771875655374*H2_12 + 0.538827851265681*H2_13 + -7.20982956711876*H2_14 + -0.573795093479248*H2_15 + -2.85866538301085*H2_2 + -6.77844263827626*H2_3 + -0.048662479051625*H2_4 + 5.27237057074547*H2_5 + 0.0128876893361084*H2_6 + -1.24943206964573*H2_7 + -2.33184755933068*H2_8 + -4.22278714928664*H2_9))))
    # Output
    Predicted_wind_summer = -2.9513310132007 + 62.6370595979605*H1_1 + 7.68671718734299*H1_10 + 20.5439830351782*H1_11 + 32.7297648816129*H1_12 + 60.5069917014904*H1_13 + -11.5156793544634*H1_2 + 10.7357775878074*H1_3 + -129.229286919483*H1_4 + 112.282696209515*H1_5 + -27.8404583038642*H1_6 + -35.944389131327*H1_7 + 33.6391777977655*H1_8 + 12.9005164466195*H1_9
    return Predicted_wind_summer

def Wind_Fall(latitude_fall:float,p:float):
    '''
    Description: Estimates zonal wind on fall equinox based on Neural net fit of TitanWRF simulation data (reference paper in TitanATM.py header)
    
    Inputs:
        latitude_fall     - latitude [deg]
        p                 - pressure altitude [mbar]

    Outputs:
        Predicted_wind_fall    - zonal wind velocity estimate [m/s], note that Titanin zonal wind predominantly prograde

    Function Dependencies

    '''
    #Adjust inputs for use
    log_p__fall = np.log10(p)
    # Layer 2
    H2_1 = np.tanh((1.48155123567549 + 0.0230884139835267*latitude_fall + -0.812890300228455*log_p__fall))
    H2_2 = np.tanh((-0.176915264712045 + -0.00732692834464198*latitude_fall + 0.0788676792295296*log_p__fall))
    H2_3 = np.tanh((-0.22808995040725 + 0.029956721736329*latitude_fall + 0.489823039395107*log_p__fall))
    H2_4 = np.tanh((1.72849542854055 + 0.00898970176681824*latitude_fall + -0.46061823211888*log_p__fall))
    H2_5 = np.tanh((-2.00591165023905 + 0.0166951147416871*latitude_fall + 0.126070314348468*log_p__fall))
    H2_6 = 0.507658577350119 + 0.010582820795093*latitude_fall + -0.127866280201101*log_p__fall
    H2_7 = 1.28121471375576 + 0.0201365118199612*latitude_fall + -0.044373844934741*log_p__fall
    H2_8 = -0.196685647501415 + 0.0239187231896571*latitude_fall + -0.535760872295007*log_p__fall
    H2_9 = -0.514101233963968 + -0.015309709059129*latitude_fall + 0.333617293728011*log_p__fall
    H2_10 = -1.42780001616144 + 0.0633278334834314*latitude_fall + -0.367219621182225*log_p__fall
    H2_11 = np.exp((-(0.5*np.square(-0.666125544792393 + 0.00896650957078417*latitude_fall + 0.747208717078553*log_p__fall))))
    H2_12 = np.exp((-(0.5*np.square(2.55392794774869 + 0.02816239291033*latitude_fall + 0.665504214733056*log_p__fall))))
    H2_13 = np.exp((-(0.5*np.square(0.586076178694997 + 0.0222415325823632*latitude_fall + 0.675132942597051*log_p__fall))))
    H2_14 = np.exp((-(0.5*np.square(-3.9046054671333 + 0.00474002881124671*latitude_fall + 1.25780639770698*log_p__fall))))
    H2_15 = np.exp((-(0.5*np.square(-1.52035990612196 + -0.0233631900120757*latitude_fall + -0.375633178345108*log_p__fall))))
    # Layer 1
    H1_1 = np.tanh((0.561909332261027 + 1.77868437542138*H2_1 + 0.322358076735687*H2_10 + 1.42834377197213*H2_11 + -1.49188867901256*H2_12 + 2.96999997075084*H2_13 + -0.117979119987543*H2_14 + 4.67075953465528*H2_15 + -4.85887386948272*H2_2 + 3.04830076604421*H2_3 + 0.704480360035189*H2_4 + 1.12761636155462*H2_5 + -1.5811139036869*H2_6 + -1.78384837020048*H2_7 + -1.65311127532732*H2_8 + 0.2428421227137*H2_9))
    H1_2 = np.tanh((2.24432592593807 + -1.02601911376397*H2_1 + -0.854333525244133*H2_10 + -1.61249297812465*H2_11 + -1.43287300099209*H2_12 + -1.68864334872693*H2_13 + -5.26530828027017*H2_14 + -2.25661357029486*H2_15 + -3.24293844923714*H2_2 + -0.404942858137196*H2_3 + -3.20263292288987*H2_4 + -1.55173747535433*H2_5 + -2.08311008461426*H2_6 + 0.61271579788957*H2_7 + 0.923867223984488*H2_8 + -0.754377876041267*H2_9))
    H1_3 = np.tanh((-1.43532116317131 + -0.638748750154765*H2_1 + 0.0834424664987198*H2_10 + -0.180122913905443*H2_11 + 0.292501421767402*H2_12 + -1.73448205004205*H2_13 + -1.13978172127632*H2_14 + 1.5041990643674*H2_15 + 1.25789279286722*H2_2 + 0.649728917393775*H2_3 + 0.285405702262022*H2_4 + -0.333997879017088*H2_5 + -0.0498704755543426*H2_6 + 0.42797900319267*H2_7 + -0.457244177126419*H2_8 + -0.280173829792609*H2_9))
    H1_4 = np.tanh((0.0479785249673933 + 1.72915100006284*H2_1 + -0.282719242171558*H2_10 + 0.112863627224473*H2_11 + -3.5788797771677*H2_12 + -1.80789413224303*H2_13 + 2.07071263015588*H2_14 + 0.844752198568345*H2_15 + 0.986058344194205*H2_2 + -2.39174534375914*H2_3 + -0.967937202015899*H2_4 + -0.700408223942688*H2_5 + -2.13589437182796*H2_6 + 0.591807666949378*H2_7 + -0.799228547739027*H2_8 + 0.767488533879769*H2_9))
    H1_5 = np.tanh((-1.10940757523259 + 0.630658817946839*H2_1 + 0.123581834152377*H2_10 + -2.39351126876109*H2_11 + 1.18713734209225*H2_12 + 4.91276581176063*H2_13 + -3.13584227736989*H2_14 + -4.08020211992892*H2_15 + 1.453376184759*H2_2 + 1.63926863094448*H2_3 + 0.504663286460813*H2_4 + 0.517440937354278*H2_5 + 1.80785621049316*H2_6 + 0.0958052006711059*H2_7 + -2.1778360588378*H2_8 + 1.28362568636886*H2_9))
    H1_6 = 0.680043795366609 + -0.0225740271892243*H2_1 + 0.697508670799856*H2_10 + 2.72065652492638*H2_11 + 1.46840036905494*H2_12 + 1.44342498498831*H2_13 + 0.702871510387196*H2_14 + -3.25153796194683*H2_15 + 0.134536188986787*H2_2 + -1.61522952172105*H2_3 + -0.854180519471029*H2_4 + 0.771199793518453*H2_5 + 2.23975250272689*H2_6 + -0.0213958983848409*H2_7 + -1.89503515956726*H2_8 + 0.273361926324873*H2_9
    H1_7 = -0.982599966986738 + 2.15306978796906*H2_1 + 0.0433997056195726*H2_10 + 0.964792220339697*H2_11 + 0.773186238551225*H2_12 + 3.07605440993201*H2_13 + 0.0102942555253846*H2_14 + -3.07087580786312*H2_15 + 0.718002942617133*H2_2 + 0.0748792517338293*H2_3 + -1.14312218580962*H2_4 + 0.407644949315174*H2_5 + 0.51013013786134*H2_6 + 0.354087412754449*H2_7 + 1.0533289140453*H2_8 + -0.978528756111695*H2_9
    H1_8 = -0.544637516510938 + 1.8428671284511*H2_1 + 0.141354647460541*H2_10 + 3.1843126872366*H2_11 + 2.1082357798109*H2_12 + 2.50905128703432*H2_13 + 4.65270477098232*H2_14 + -3.46759611356049*H2_15 + 4.19580471021973*H2_2 + -1.44819298993917*H2_3 + -3.06207621168879*H2_4 + 0.59951077402657*H2_5 + -0.284321552459114*H2_6 + 0.309636446797978*H2_7 + -0.450840945956869*H2_8 + 0.990277080811405*H2_9
    H1_9 = np.exp((-(0.5*np.square(-0.41474971317419 + 1.46594804691835*H2_1 + 0.272419820303683*H2_10 + -0.0452900374849609*H2_11 + -0.494146614739108*H2_12 + 4.22625152039056*H2_13 + 0.10509977857831*H2_14 + 5.58039282554338*H2_15 + 0.641992237283391*H2_2 + 1.10501883275688*H2_3 + -1.01465061751552*H2_4 + 1.13813179215768*H2_5 + -0.161144102806623*H2_6 + -0.797492677934998*H2_7 + 1.46436379919192*H2_8 + -0.598108425338521*H2_9))))
    H1_10 = np.exp((-(0.5*np.square(-0.560254317477412 + -1.5566213541649*H2_1 + 0.878811144920133*H2_10 + -1.00152073552974*H2_11 + -1.99285470310699*H2_12 + 1.54219848281644*H2_13 + 2.89733667312157*H2_14 + 5.62921840230124*H2_15 + -0.004942934305151*H2_2 + 4.47004858054047*H2_3 + 2.53746761862299*H2_4 + 0.818406896528896*H2_5 + -0.772579743551342*H2_6 + 2.65716431843264*H2_7 + -1.6266514627747*H2_8 + -0.0297144307694209*H2_9))))
    H1_11 = np.exp((-(0.5*np.square(-0.726277677209214 + -0.547988893984799*H2_1 + 0.0450162341461822*H2_10 + -2.2531304000683*H2_11 + 0.757743825383438*H2_12 + -2.35606401598976*H2_13 + -3.84500912299737*H2_14 + -2.19279067191805*H2_15 + -17.1622686018341*H2_2 + -2.16573240061044*H2_3 + 0.931051261596949*H2_4 + -5.76606114665358*H2_5 + -1.44390168916877*H2_6 + -1.93799700001897*H2_7 + 1.2167604853732*H2_8 + 2.47339061280695*H2_9))))
    H1_12 = np.exp((-(0.5*np.square(0.954679322911297 + 1.79755770434086*H2_1 + -0.343208453322511*H2_10 + 2.12506757893362*H2_11 + 5.83903910623738*H2_12 + 2.06161327156264*H2_13 + 5.5073844465557*H2_14 + -4.73533325227528*H2_15 + 10.3799906549192*H2_2 + -3.4906309456711*H2_3 + -1.09077478249246*H2_4 + 5.12261636646956*H2_5 + 0.381349886598079*H2_6 + 0.306679611437022*H2_7 + 3.48294435319438*H2_8 + 0.441048600812476*H2_9))))
    H1_13 = np.exp((-(0.5*np.square(-3.43526801667817 + 2.77655992357616*H2_1 + 0.772630479067848*H2_10 + 1.16809726867624*H2_11 + -6.4414515056409*H2_12 + -2.63200908046796*H2_13 + 1.9426329628822*H2_14 + 9.75925827569348*H2_15 + -2.21299626977004*H2_2 + 1.09758509755258*H2_3 + 0.141901681515262*H2_4 + -5.16650866011636*H2_5 + -2.68395261497517*H2_6 + -2.50468797967255*H2_7 + 1.24612325213128*H2_8 + 0.316319565090525*H2_9))))
    # Output
    Predicted_wind_fall_1 = -160.522185801957 + 75.307508703947*H1_1 + -19.7683913956784*H1_10 + 40.8072487273194*H1_11 + 23.9627490307055*H1_12 + 45.2408487263147*H1_13 + -47.7664689040327*H1_2 + -180.2898874136*H1_3 + 11.3194356522832*H1_4 + 60.4906806790282*H1_5 + -14.8827637133507*H1_6 + -13.1078742592492*H1_7 + -22.4227435611634*H1_8 + 14.1261758531426*H1_9
    return Predicted_wind_fall_1

def Wind_Winter(latitude_winter:float,p:float):
    '''
    Description: Estimates zonal wind on winter solstice based on Neural net fit of TitanWRF simulation data (reference paper in TitanATM.py header)
    
    Inputs:
        latitude_winter   - latitude [deg]
        p                 - pressure altitude [mbar]

    Outputs:
        Predicted_wind_winter    - zonal wind velocity estimate [m/s], note that Titanin zonal wind predominantly prograde

    Function Dependencies

    '''
    #Adjust inputs for use
    log_p__winter = np.log10(p)
    # Layer 2
    H2_1 = np.tanh((2.14848149115614 + 0.00424272405010235*latitude_winter + 0.913947152004396*log_p__winter))
    H2_2 = np.tanh((-0.367938299772184 + 0.0146368402622964*latitude_winter + -0.164589448413825*log_p__winter))
    H2_3 = np.tanh((0.251283810043991 + 0.0202703410378408*latitude_winter + -0.365233159876745*log_p__winter))
    H2_4 = np.tanh((-1.0472516612272 + 0.0390351694837392*latitude_winter + 0.351806162221188*log_p__winter))
    H2_5 = np.tanh((-3.5444533716054 + 0.0546962944140422*latitude_winter + 0.598850140250431*log_p__winter))
    H2_6 = -0.318266587221062 + 0.0102706058358551*latitude_winter + -0.65004342927767*log_p__winter
    H2_7 = 1.56455610388202 + -0.0184202638476034*latitude_winter + 0.891841440331172*log_p__winter
    H2_8 = -0.711836884189618 + -0.0179591922174557*latitude_winter + -0.245299009233136*log_p__winter
    H2_9 = -0.374311712889607 + 0.0554191688253636*latitude_winter + -1.26270716573153*log_p__winter
    H2_10 = -1.19308850678032 + 0.0439018961181034*latitude_winter + 0.64576348233223*log_p__winter
    H2_11 = np.exp((-(0.5*np.square(-0.0970787731950602 + -0.0235521616704978*latitude_winter + -0.0727175962170615*log_p__winter))))
    H2_12 = np.exp((-(0.5*np.square(0.430049402278797 + 0.0358247809554013*latitude_winter + 0.860994027260634*log_p__winter))))
    H2_13 = np.exp((-(0.5*np.square(-0.226509081677396 + 0.00468411664479661*latitude_winter + 0.458949774966489*log_p__winter))))
    H2_14 = np.exp((-(0.5*np.square(0.9999946631171 + -0.0414164472886149*latitude_winter + 0.666997997250372*log_p__winter))))
    H2_15 = np.exp((-(0.5*np.square(4.13125718059135 + -0.0309888891626921*latitude_winter + 0.412292364072803*log_p__winter))))
    # Layer 1
    H1_1 = np.tanh((-0.748956776625752 + -0.226628356746679*H2_1 + -0.826021118614741*H2_10 + 0.933299135356892*H2_11 + -1.12368117980905*H2_12 + -2.05734748165546*H2_13 + -2.43219774600817*H2_14 + 0.653175109115505*H2_15 + 1.05001273857473*H2_2 + 0.787042779399477*H2_3 + -0.583965411405575*H2_4 + 1.61195891154475*H2_5 + -0.37335809985834*H2_6 + -0.771410880031894*H2_7 + 1.13201889377134*H2_8 + 0.55393559857633*H2_9))
    H1_2 = np.tanh((0.636930173074292 + -2.57060785864088*H2_1 + 0.0534372178710699*H2_10 + -0.684382402291207*H2_11 + -1.77887731857709*H2_12 + -0.346962114535956*H2_13 + -0.146796916322896*H2_14 + -0.813363619847607*H2_15 + 0.119842832798735*H2_2 + -0.0483303600992149*H2_3 + 1.15143713870203*H2_4 + 1.24643210672373*H2_5 + 0.139265677679085*H2_6 + -0.430703935773179*H2_7 + 1.22800830371965*H2_8 + 1.09847211726621*H2_9))
    H1_3 = np.tanh((0.654540872868799 + 0.735135317347157*H2_1 + 0.681955384399731*H2_10 + 0.920067189915984*H2_11 + 0.210233398873339*H2_12 + -0.588068063697532*H2_13 + 0.491529385859818*H2_14 + -2.17827105061507*H2_15 + -2.31695697985943*H2_2 + -2.13991103293657*H2_3 + 0.994009392683931*H2_4 + -0.326407590085742*H2_5 + 0.399707891430001*H2_6 + 0.31210356190253*H2_7 + -0.509999746065118*H2_8 + 0.234014662491774*H2_9))
    H1_4 = np.tanh((-0.75516554982455 + -0.794879275370397*H2_1 + 1.97996379798295*H2_10 + -1.13346841583046*H2_11 + -2.15042690487248*H2_12 + -0.151137886709255*H2_13 + -2.71952079102466*H2_14 + 1.01759240151116*H2_15 + -2.39081154626857*H2_2 + 1.48292408630826*H2_3 + -1.45287426004174*H2_4 + -3.35858772853982*H2_5 + -0.516256573581105*H2_6 + 0.75986736003562*H2_7 + -1.66272691197057*H2_8 + -0.526576699204374*H2_9))
    H1_5 = np.tanh((1.17942218731375 + 0.370557430426298*H2_1 + 0.0852414928518702*H2_10 + -1.08309242767227*H2_11 + -2.34355578042624*H2_12 + -3.00776971898388*H2_13 + -0.838740762431801*H2_14 + 0.194012885309658*H2_15 + -0.92672798459508*H2_2 + -0.988734106984405*H2_3 + -1.48981715961194*H2_4 + 0.740819824373267*H2_5 + 0.228188061555887*H2_6 + 0.167930994333864*H2_7 + 0.714175407860121*H2_8 + 1.29852248330072*H2_9))
    H1_6 = 1.20584330729915 + -5.50461583912576*H2_1 + 0.496213219393441*H2_10 + 0.642886327433674*H2_11 + 2.27475404432579*H2_12 + 2.04474545553408*H2_13 + 0.854552919719555*H2_14 + 1.19756034484082*H2_15 + 1.80202864758256*H2_2 + 2.33018607508151*H2_3 + 0.0326315757811718*H2_4 + 0.641187990328605*H2_5 + -0.17814776822908*H2_6 + -1.31867009613914*H2_7 + 1.92086690961813*H2_8 + -1.97403153289883*H2_9
    H1_7 = 1.06717764451654 + -1.52418229471634*H2_1 + -1.16364246492858*H2_10 + 1.86730673950613*H2_11 + 0.042167076208079*H2_12 + 1.39156257762595*H2_13 + 0.913899712134317*H2_14 + 1.12466533133338*H2_15 + -0.786693155238284*H2_2 + 0.549616798349642*H2_3 + -1.08971033388224*H2_4 + -1.40752188013209*H2_5 + 0.0544477110693639*H2_6 + 0.198813003392259*H2_7 + 1.17229243535733*H2_8 + -0.374619057946599*H2_9
    H1_8 = 1.09194418205586 + 2.37932393608736*H2_1 + -0.758056903632029*H2_10 + -0.754745866974342*H2_11 + -1.22349249464825*H2_12 + -1.1173654420804*H2_13 + -0.570351763086202*H2_14 + 0.291635067847509*H2_15 + -2.6708128692523*H2_2 + -1.47940188117427*H2_3 + -1.73210375081469*H2_4 + 0.422784575713744*H2_5 + -0.397526511833236*H2_6 + 0.133677391914596*H2_7 + 1.27911906350874*H2_8 + 0.295974088452417*H2_9
    H1_9 = np.exp((-(0.5*np.square(2.07463136410424 + -2.01934939027221*H2_1 + -0.147324215431885*H2_10 + 1.30687530417228*H2_11 + 0.1496105308683*H2_12 + -0.452615314019387*H2_13 + -0.975293089791868*H2_14 + 1.05640934947886*H2_15 + 0.974577089987495*H2_2 + 1.27356870091388*H2_3 + 0.809488439039176*H2_4 + 0.301346472340887*H2_5 + -1.76074342295712*H2_6 + -0.416373999369759*H2_7 + -0.289262693221704*H2_8 + -0.306166784747569*H2_9))))
    H1_10 = np.exp((-(0.5*np.square(-0.50909407047462 + 2.81780221630863*H2_1 + 1.30148021552877*H2_10 + -7.0726632534616*H2_11 + 2.14548418584091*H2_12 + -0.791188553838306*H2_13 + 1.1628350973186*H2_14 + 2.78375866818285*H2_15 + -9.61515439873795*H2_2 + 1.96255951470041*H2_3 + -2.68752616874181*H2_4 + -1.68073716868711*H2_5 + -2.7685541522768*H2_6 + 0.0775940704749696*H2_7 + 0.828386627932*H2_8 + 1.63567226445644*H2_9))))
    H1_11 = np.exp((-(0.5*np.square(-0.962804963985827 + 1.04897590200527*H2_1 + 1.4847955941923*H2_10 + 2.83876970600227*H2_11 + -1.72164265110853*H2_12 + 4.71399841101965*H2_13 + -0.285166439285121*H2_14 + 0.166702108548552*H2_15 + 0.552695834152056*H2_2 + -0.0737511732239983*H2_3 + 1.7162431803817*H2_4 + 1.57584167468909*H2_5 + 1.42450866376331*H2_6 + -3.90205581242794*H2_7 + 1.97016297453136*H2_8 + -3.63823156551453*H2_9))))
    H1_12 = np.exp((-(0.5*np.square(0.481961176434762 + -2.62339404054801*H2_1 + -1.25753175247906*H2_10 + 2.93254167570833*H2_11 + 0.254580087284231*H2_12 + -0.147557969836766*H2_13 + -1.32301631341206*H2_14 + 5.26715059839814*H2_15 + 3.69854618033203*H2_2 + -2.4656795299877*H2_3 + 2.36997797503828*H2_4 + 0.982214082825517*H2_5 + 1.98348981796293*H2_6 + 1.28900631336055*H2_7 + 0.752886055421637*H2_8 + -0.153210328195809*H2_9))))
    H1_13 = np.exp((-(0.5*np.square(0.719507860129646 + -5.67335504833128*H2_1 + 0.353755051202777*H2_10 + 0.219190868315346*H2_11 + -0.86825063286785*H2_12 + 6.22735778078477*H2_13 + -1.25996970804307*H2_14 + 1.54599199456704*H2_15 + 0.224258204467911*H2_2 + -0.677303456318247*H2_3 + -0.0551430465917811*H2_4 + 0.645305643101272*H2_5 + -0.71798367573234*H2_6 + 0.523809004302275*H2_7 + -0.544402164783236*H2_8 + 0.254059733266516*H2_9))))
    # Output
    Predicted_wind_winter_1 = -27.8578189674588 + 43.7601235512002*H1_1 + 49.931033198157*H1_10 + -27.0053894159078*H1_11 + -31.045275913169*H1_12 + -49.0690729830668*H1_13 + -12.0253739470542*H1_2 + 121.284955512299*H1_3 + -24.7513667125351*H1_4 + -45.3344567674758*H1_5 + 12.6436884755954*H1_6 + 4.54919310989883*H1_7 + -10.2027081769562*H1_8 + 131.056989714571*H1_9
    return Predicted_wind_winter_1

def Wind_Spring(latitude_spring:float,p:float):
    '''
    Description: Estimates zonal wind on spring equinox based on Neural net fit of TitanWRF simulation data (reference paper in TitanATM.py header)
    
    Inputs:
        latitude_spring   - latitude [deg]
        p                 - pressure altitude [mbar]

    Outputs:
        Predicted_wind_spring    - zonal wind velocity estimate [m/s], note that Titanin zonal wind predominantly prograde

    Function Dependencies

    '''
    #Adjust inputs for use
    log_p__spring = np.log10(p)
    # Layer 2
    H2_1 = np.tanh((1.38341679123745 + -0.0024378853705504*latitude_spring + -1.08674078383671*log_p__spring))
    H2_2 = np.tanh((-0.280874168306858 + -0.00745395907656014*latitude_spring + -0.178749334450518*log_p__spring))
    H2_3 = np.tanh((2.00336573934082 + 0.0227357406214765*latitude_spring + 0.595192929796026*log_p__spring))
    H2_4 = np.tanh((-0.450651829789642 + 0.00703548077915679*latitude_spring + 0.289173396906992*log_p__spring))
    H2_5 = np.tanh((-0.0467215908695787 + -0.0227174422086051*latitude_spring + -0.825644285152629*log_p__spring))
    H2_6 = 1.86863798784842 + 0.012920314808033*latitude_spring + -0.798467794998361*log_p__spring
    H2_7 = -0.542289060155293 + 0.0174937829240125*latitude_spring + -0.477613077381683*log_p__spring
    H2_8 = -1.68933616729961 + 0.0215162020209371*latitude_spring + -0.989466805932535*log_p__spring
    H2_9 = -0.0435295385868055 + 0.0139060502162689*latitude_spring + 1.10813371499749*log_p__spring
    H2_10 = 3.78176479825462 + -0.0238550867149189*latitude_spring + 0.986449144952018*log_p__spring
    H2_11 = np.exp((-(0.5*np.square(-0.382800027036067 + 0.0114507150428558*latitude_spring + -0.292262463211584*log_p__spring))))
    H2_12 = np.exp((-(0.5*np.square(-1.76929908511179 + -0.00266286020159303*latitude_spring + -0.359444688843422*log_p__spring))))
    H2_13 = np.exp((-(0.5*np.square(-1.39777660270909 + -0.0248919430007551*latitude_spring + -0.698567051954065*log_p__spring))))
    H2_14 = np.exp((-(0.5*np.square(-1.39659317386496 + -0.0263536361946752*latitude_spring + -0.701103545831205*log_p__spring))))
    H2_15 = np.exp((-(0.5*np.square(-0.94483508080147 + 0.00673062746748883*latitude_spring + -0.480098280923561*log_p__spring))))
    # Layer 1
    H1_1 = np.tanh((-1.19233666481825 + 3.16048982930191*H2_1 + -0.4409363736863*H2_10 + 3.0201926677067*H2_11 + 0.593095763790073*H2_12 + -2.00637242550189*H2_13 + -2.4056461322685*H2_14 + -0.342875124048496*H2_15 + 2.89426561144564*H2_2 + 0.672367091758277*H2_3 + 2.14453103951382*H2_4 + 5.81984807004158*H2_5 + 0.788746306996505*H2_6 + -0.128742571897132*H2_7 + 0.782664401159324*H2_8 + 2.38081775480195*H2_9))
    H1_2 = np.tanh((0.68948868284322 + -0.29711305724503*H2_1 + -2.55704066457461*H2_10 + -0.325500570754017*H2_11 + 0.581673072386414*H2_12 + 1.32621139120638*H2_13 + -0.352689725414433*H2_14 + -0.597002971833245*H2_15 + 0.467923103030976*H2_2 + -0.498318397013207*H2_3 + 0.17487722348044*H2_4 + 0.907800837305435*H2_5 + 0.26322207951248*H2_6 + 1.00228607600179*H2_7 + 0.907914315257646*H2_8 + 0.437754947310355*H2_9))
    H1_3 = np.tanh((-1.20848314933849 + -1.50864170106531*H2_1 + -2.69613967229438*H2_10 + 2.68382532684623*H2_11 + -1.1698888228699*H2_12 + -0.940525456484015*H2_13 + 1.37330375835771*H2_14 + 3.69411013001214*H2_15 + -1.00899972174692*H2_2 + 0.573728081056394*H2_3 + 0.490132928568693*H2_4 + 0.154866458343946*H2_5 + 0.0322632955050502*H2_6 + -1.78352240493032*H2_7 + -0.0980699695395049*H2_8 + -0.781411281171607*H2_9))
    H1_4 = np.tanh((-2.78068405736481 + 1.6325657145814*H2_1 + 0.287150803717526*H2_10 + 0.843191992138806*H2_11 + -1.88045438935878*H2_12 + 4.64894939150466*H2_13 + -5.60729894389407*H2_14 + 0.631782491189261*H2_15 + 0.998551778553861*H2_2 + 0.382647560924869*H2_3 + 1.11430865330924*H2_4 + 0.526591291416927*H2_5 + -0.150726692138089*H2_6 + 0.266512523322237*H2_7 + -0.424786571454002*H2_8 + 0.424237680440018*H2_9))
    H1_5 = np.tanh((1.76824830892783 + 0.524997952251033*H2_1 + -0.446622488479806*H2_10 + 0.396930193020721*H2_11 + 4.20474861513379*H2_12 + -0.113282955035499*H2_13 + -2.39202080933765*H2_14 + -0.690077673837681*H2_15 + 1.39497983723279*H2_2 + 2.53896524080197*H2_3 + 2.83609383130729*H2_4 + 0.253713807977225*H2_5 + -0.390668499291104*H2_6 + 1.40016463318581*H2_7 + -0.305952079003478*H2_8 + -0.390667571309303*H2_9))
    H1_6 = -2.9141277823292 + 2.03775690439722*H2_1 + -0.120916096662655*H2_10 + 0.674394014060204*H2_11 + 0.41346983429558*H2_12 + -0.454118122498727*H2_13 + -1.84002184327164*H2_14 + -0.413323077085644*H2_15 + -0.968492049401873*H2_2 + 0.561152258790757*H2_3 + 1.17552892826456*H2_4 + 1.22659284716859*H2_5 + -1.01576184575699*H2_6 + 1.42288843089256*H2_7 + 1.41867225936288*H2_8 + -0.483892011135919*H2_9
    H1_7 = -2.05659448720068 + 1.54904823721664*H2_1 + 0.608935585954196*H2_10 + -0.323854454981643*H2_11 + 1.21711207001943*H2_12 + -1.99233633668361*H2_13 + 0.695729788852812*H2_14 + 0.444079089982434*H2_15 + 1.23150942590007*H2_2 + 1.11131775909187*H2_3 + 1.25016599025977*H2_4 + -1.163567158154*H2_5 + -0.669978045510549*H2_6 + -0.776062617026577*H2_7 + 0.170035380103454*H2_8 + -1.33484279524052*H2_9
    H1_8 = -3.61127322099813 + 1.47695310213861*H2_1 + 0.206571355425728*H2_10 + 1.74505260873307*H2_11 + 5.02763991050715*H2_12 + -0.569075195283124*H2_13 + 0.242732151438438*H2_14 + -4.01551434828566*H2_15 + -0.504153584310793*H2_2 + 1.68590653369026*H2_3 + 2.16317788349566*H2_4 + 0.312770824028558*H2_5 + 0.505023385059657*H2_6 + -2.306840725846*H2_7 + 0.422095697186442*H2_8 + 0.505399612730275*H2_9
    H1_9 = np.exp((-(0.5*np.square(2.98705029626059 + 0.243827099630827*H2_1 + 0.880009768172646*H2_10 + 0.210992443424434*H2_11 + -21.4504647205286*H2_12 + 0.00292610535011202*H2_13 + -4.23813663664286*H2_14 + -2.75902643184607*H2_15 + 2.6898633628094*H2_2 + 1.40035989428823*H2_3 + -2.51827438366665*H2_4 + 3.45699250108549*H2_5 + 1.53366545608683*H2_6 + 2.8395034120672*H2_7 + -2.74725132206131*H2_8 + -1.18561079818652*H2_9))))
    H1_10 = np.exp((-(0.5*np.square(-0.655675156972975 + 3.7556778796209*H2_1 + 0.122272455188655*H2_10 + 1.13098972705162*H2_11 + -3.57603493814297*H2_12 + 4.47419327826092*H2_13 + -3.63676290745743*H2_14 + -2.28956735070084*H2_15 + -6.1782891984682*H2_2 + -1.02560682369073*H2_3 + 10.8595398150098*H2_4 + 0.845792068131726*H2_5 + -0.326529022397951*H2_6 + 0.262111591622962*H2_7 + 1.5160357103913*H2_8 + -1.50008111756939*H2_9))))
    H1_11 = np.exp((-(0.5*np.square(2.25082551647484 + 1.34788158006064*H2_1 + 1.03479132116488*H2_10 + -0.885856607419756*H2_11 + 7.83894680370234*H2_12 + -0.224471706368769*H2_13 + 1.04692614892947*H2_14 + -4.41990179443147*H2_15 + -0.794342852729881*H2_2 + 0.654681486087872*H2_3 + 6.32761333493417*H2_4 + -2.11881386500693*H2_5 + -0.944859957617207*H2_6 + 4.18468592791312*H2_7 + 0.604568225861676*H2_8 + -1.71202058544625*H2_9))))
    H1_12 = np.exp((-(0.5*np.square(-0.726280899824667 + 0.0849759425264948*H2_1 + -2.47130552730355*H2_10 + -1.562596705216*H2_11 + -0.658632517071195*H2_12 + 0.628399903876239*H2_13 + -1.26161823802165*H2_14 + 0.625559636268273*H2_15 + 0.124961778231148*H2_2 + 1.35870411133355*H2_3 + 0.368288470773451*H2_4 + 3.50728955168252*H2_5 + -0.190785504033321*H2_6 + 0.281475537274677*H2_7 + 0.469122507627875*H2_8 + -0.611565178830736*H2_9))))
    H1_13 = np.exp((-(0.5*np.square(1.27729651804617 + -3.71582256045354*H2_1 + 2.3730421767836*H2_10 + -1.69653876629178*H2_11 + -4.77062051107572*H2_12 + -3.30378833620352*H2_13 + -0.288805514828809*H2_14 + 4.98830424721849*H2_15 + 4.22625331631442*H2_2 + 2.536763066142*H2_3 + -7.93825915855402*H2_4 + 2.78715902241238*H2_5 + -2.27050077826594*H2_6 + 5.46854924232791*H2_7 + 0.750110380632626*H2_8 + 2.22417574400741*H2_9))))
    # Output
    Predicted_wind_spring = 196.242594755485 + 38.6568211646926*H1_1 + 25.1756503276597*H1_10 + -44.8297475479415*H1_11 + 4.69153859777728*H1_12 + 38.1963614448332*H1_13 + 7.80634847879649*H1_2 + -95.6621459391507*H1_3 + -143.77858066201*H1_4 + 98.5734774103538*H1_5 + 33.4916562170904*H1_6 + 38.3499111996793*H1_7 + 130.125142610056*H1_8 + -73.0658200465044*H1_9
    return Predicted_wind_spring


def continuous_gust_model(V, U, N_yr, Planet, alt):
    # Constants
    delta = 0.1  # time interval in seconds
    L = 400  # integral length scale in meters
    F = 1.4  # sensible heat flux in W/m^2
    T = 300  # temperature in K
    Z = 900  # convective layer depth in meters
    N = int(N_yr * 365.25 * 24 * 60 * 60)

    # Extract atmospheric values (assuming these are functions returning arrays)
    Atm = ATM_Table(alt, Planet)
    R = 287.974
    gamma = Atm[8]
    Cp = (gamma * R) / (gamma - 1)
    rho = Atm[0]
    g = Planet_Const(Planet)[0]

    # Compute the convective velocity scale w*
    w_star = (F * g * Z / (rho * Cp * T))**0.33

    # Compute the gust standard deviation sigma_g
    sigma_g = np.sqrt((0.2 * U)**2 + (0.6 * w_star)**2)

    # Compute the timescale k
    k = V / L

    # Initialize the Ug array
    Ug = np.zeros(N)

    # Compute constants used in the loop
    exp_k_delta = np.exp(-k * delta)
    sqrt_term = np.sqrt(2 * k * delta) * sigma_g

    # Vectorized computation of Ug using NumPy
    noise = np.random.randn(N)
    Ug[1:] = 10*(exp_k_delta * Ug[:-1] + sqrt_term * noise[1:])
     # Had to muliply by 10 bc when vectorization was added to make code run faster, 
     # eqn was predicting Ug by 10x less for some odd reason. However it was just 10x
     # less and no accuracy was lost in the final value after the adjustment

    # Plot
    # plt.figure(figsize=(10, 6))
    # plt.plot(np.arange(len(Ug)), Ug, label=f'Ug vs. N for {N_yr} years')
    # plt.xlabel('N (Time steps [s])')
    # plt.ylabel('Ug (Gust velocity [m/s])')
    # plt.title('Gust Velocity vs. Time Steps')
    # plt.legend()
    # plt.grid(True)
    # plt.show()
    return np.max(Ug)

# Call the function
# Ug = continuous_gust_model(18, abs(0.1), 0.00005,'Titan',500)
# print(Ug)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Test Code
# a = ATM_Table(4566.932,'max')
# print(a)
# b = ATM_Table(70370.266,'max')
# print(b)
# c = ATM_Table(136173.6,'max')
# print(c)

# x = np.linspace(-89,89,181)
# y = np.power(10,np.linspace(-3,3.147,200))
# X,Y = np.meshgrid(x,y)
# Z = Wind_Spring(X,Y)
# X,Y = np.meshgrid(x,np.log10(y))

# fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
# surf = ax.plot_surface(X,Y,Z,linewidth=0,antialiased=False)
# fig.colorbar(surf, shrink=0.5,aspect=5)
# contours = plt.contour(X, Y,levels = [-15,0,15,30,45,60,75,90,105,120,135,150,165,185,210], cmap='Blues')
# plt.clabel(contours, inline=True, fontsize=8)

# plt.imshow(Z, origin='lower',
#         cmap='RdGy', alpha=0.5)
# plt.colorbar()
# plt.show()
# y = np.linspace(0,0.875,8)
# D1 = ATM_Table(500, 'Titan')
# p = D1[1]/100
# print('Wind estimate:',Wind_Summer(68,p))
# print(a)
